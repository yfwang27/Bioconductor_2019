pal(rich8equal)
rich8equal2<-rich8equal[c(2,3,4,6,8,1)]
pal(rich8equal2)
rich8equal2
#K27_ChIP_methy<-ave_PGC_K27K9_WGBS_intergenic_list[[1]]
K27_ChIP_methy<-ave_PGC_K27K9_WGBS_genic_list[[1]]
?scale
y <- cbind(
rnorm( 1000, 20, 4 ),
rnorm( 1000, 20, 4 ),
rnorm( 1000, 20, 4 ),
rnorm( 1000, 20, 4 ) )
library(genefilter)
hist( rowttests( y, factor( c( "C", "C", "T", "T" ) ) )$p.value )
y <- cbind(
rnorm( 1000, 20, 4 ),
rnorm( 1000, 30, 4 ),
rnorm( 1000, 20, 4 ),
rnorm( 1000, 30, 4 ) )
y
hist( rowttests( y, factor( c( "C", "C", "T", "T" ) ) )$p.value )
inbgfile<-"/Volumes/bioinfomatics$/yfwang/Felix/neuro_Rad21Tev_RNAseq/script/Sample_2_etoh_72hours.bedGraph"
oribg<-read.delim(inbgfile)
dim(oribg)
head(oribg)
unique(oribg$chr1)
oribg<-oribg[-grep("random",oribg[,1]),]
dim(oribg)
head(oribg)
unique(oribg$chr1)
outbgfile<-"/Volumes/bioinfomatics$/yfwang/Felix/neuro_Rad21Tev_RNAseq/script/Sample_2_etoh_72hours.okbg"
write.table(oribg,file=outbgfile,quote=F,header=F,sep="\r",row.names = F)
?write.table
write.table(oribg,file=outbgfile,quote=F,sep="\t",row.names = F,col.names=F)
?order
oribg<-oribg[order(oribg[,1],order[,2]),]
oribg<-oribg[order(oribg[,1],oribg[,2]),]
write.table(oribg,file=outbgfile,quote=F,sep="\t",row.names = F,col.names=F)
oribg<-read.delim(inbgfile,header = F,stringsAsFactors = F)
oribg<-oribg[-grep("random",oribg[,1]),]
head(oribg)
class(oribg$V1)
class(oribg$V2)
oribg2<-oribg[order(oribg[,1],oribg[,2]),]
head(oribg2)
unique(oribg2$V1)
write.table(oribg2,file=outbgfile,quote=F,sep="\t",row.names = F,col.names=F)
?cbind
suppressPackageStartupMessages(library("basecallQC"))
suppressPackageStartupMessages(library("stringr"))
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("tidyr"))
read.csv("/Volumes/bioinfomatics$/yfwang/Vernia/Collaborator_Brain/script/SampleDes.csv")
sampledes<-read.csv("/Volumes/bioinfomatics$/yfwang/Vernia/Collaborator_Brain/script/SampleDes.csv")
head(sampledes)
table(sampledes$Tissue)
table(sampledes$Genotype)
ftable(sampledes$Tissue,sampledes$Genotype)
dirgene<-"/Volumes/bioinfomatics$/yfwang/Louise/TCGA_pancancer/rawdata_from_Louis/list_of_INT/"
kegg_glycolysis<-read.table(paste0(dirgene,"KEGG_Glycolysis_Gluconeogenesis.txt"),header = F)
kegg_glycolysis<-kegg_glycolysis$V1
kegg_glycolysis<-kegg_glycolysis[!duplicated(kegg_glycolysis)]
Rabinowitz_genes<-read.table(paste0(dirgene,"RateLimiting_GSEA.txt"),header = F)
Rabinowitz_genes<-Rabinowitz_genes$V1
Rabinowitz_genes<-Rabinowitz_genes[!duplicated(Rabinowitz_genes)]
log2(0+0.1)
log2(0+00.1)
install.packages(c("DT", "formattable", "ggplot2", "knitr", "prettydoc"))
install.packages(c("gplots", "plotly"))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library("MotifDb"))
library("ChIPQC")
?ChIPQC
data(example_QCexperiment)
QCannotation(exampleExp)
exampleExp
ChIPQC()
ChIPQC
# annotation
#Either a character string indicating the genome and version to use as a genomic annotation,
#or a previously defined annotation (obtained using QCannotation on a previously defined ChIPQCexperiment object.)
library(rtracklayer)
library(GenomicRanges)
library(GenomicFeatures)
library(ChIPQC)
ce10gtf<-"/Volumes/bioinfomatics$/yfwang/Jocelyn/UCSC_ce10/UCSC_ce10_genes.gtf"
ce10genes<-import(ce10gtf,format="gtf")
unique(ce10genes$type)
txdb <- makeTxDbFromGFF (ce10gtf)
genes_fromce10 <- genes(txdb)
Alltranscripts<- reduce(transcripts(txdb))
seqlengths(Alltranscripts)<-c(15072423,15279345,13783700,17493793,20924149,17718866)
Allcds <- reduce(unique(unlist(cdsBy(txdb,"tx"))))
#cdsFromce10<-cds(txdb)
#cdsFromce10_reduce<- reduce(cdsFromce10)
exons_fromce10<-exons(txdb)
exons_fromce10_reduce<-reduce(exons_fromce10)
#utr_5fromce10<-fiveUTRsByTranscript(txdb)
#utr_3fromce10<-threeUTRsByTranscript(txdb)
Allintrons <- reduce(unique(unlist(intronsByTranscript(txdb))))
posAllTranscripts <- Alltranscripts[strand(Alltranscripts) == "+"]
posAllTranscripts <- posAllTranscripts[!(start(posAllTranscripts)-20000 < 0)]
negAllTranscripts <- Alltranscripts[strand(Alltranscripts) == "-"]
chrLimits <- seqlengths(negAllTranscripts)[as.character(seqnames(negAllTranscripts))]
if(!any(is.na(chrLimits))){
negAllTranscripts <- negAllTranscripts[!(end(negAllTranscripts)+20000 > chrLimits)]
}
Alltranscripts <- c(posAllTranscripts,negAllTranscripts)
Promoters500<-reduce(flank(Alltranscripts,500))
Promoters2000to500<-reduce(flank(Promoters500,1500))
Promoters20000to2000<- reduce(flank(Promoters2000to500,18000))
customAnnotation <- list(
version="ce10",
LongPromoters20000to2000=Promoters20000to2000,
Promoters2000to500=Promoters2000to500,
Promoters500=Promoters500,
Alltranscripts=Alltranscripts,
Allcds=Allcds,
Allintrons=Allintrons
)
bamfiles<-dir("/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019/Aligned",
pattern="*DupMarked.bam",full.names = T)
names(bamfiles)<-gsub(".DupMarked.bam","",basename(bamfiles))
blacklist<-"/Volumes/bioinfomatics$/yfwang/Jocelyn/UCSC_ce10/ce10-blacklist.bed"
chromosomes=c("chrI","chrII","chrIII","chrIV","chrV","chrX")
blackgr<-import(blacklist,format="bed")
SampleSheet <- "/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019/script/Pipelinesamplesheet.txt"
organism <- "ce10"
ss <- read.delim(SampleSheet,sep="\t",header=F)
ss <- read.delim(SampleSheet,sep="\t",header=F)
ss
baseDir="/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019"
bamFiles <- dir(file.path(baseDir,"Aligned"),pattern="*.DupMarked\\.bam$",full.name=T)
bamBase <- gsub("DupMarked\\.bam","",basename(bamFiles))
bamFrame <- cbind(bamBase,bamFiles)
peaks <-  dir(file.path(baseDir,"Macs"),pattern="*_peaks.bed$",full.name=T)
peaksBase <- gsub("_WithInput.*","",basename(peaks))
peakFrame <- cbind(peaksBase,peaks)
ss <- ss[ss[,11] == "Report",]
ssFrame <- merge(ss[,c(2,4,6,7,8,9,10,11)]
,merge(bamFrame,peakFrame,by=1,all.x=T,all.y=F)
,by=1,all.x=F,all.y=F)
bamControl <- vector("character",length=nrow(ssFrame))
for(i in 1:nrow(ssFrame)){
if(any(ssFrame[,1] %in% ssFrame[i,2])){
bamControl[i] <- as.vector(ssFrame[ssFrame[,1] %in% ssFrame[i,2],9])
}else{
bamControl[i] <- NA
}
}
SS2 <- data.frame(
SampleID=as.vector(ssFrame[,1]),
Tissue=as.vector(ssFrame[,3]),
Factor=as.vector(ssFrame[,4]),
Condition=as.vector(ssFrame[,5]),
Treatment=as.vector(ssFrame[,6]),
Replicate=as.vector(ssFrame[,7]),
bamReads=as.vector(ssFrame[,9]),
bamControl=bamControl,
ControlID=as.vector(ssFrame[,2]),
Peaks=as.vector(ssFrame[,10]),
PeakCaller=c(rep("macs",nrow(ssFrame)))
#Peaks=c(rep(NA,7))
)
SS2
ChIPQC
?ChIPQC
SS2
chromosomes
blackgr
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
str(resExperiment)
?ChIPQC
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
ChIPQC
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blacklist,chromosomes=chromosomes)
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
head(SS2)
SS2_N2<-SS2[1:2,]
SS2_N2
resExperiment_N2 <- ChIPQC(SS2_N2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment_R8 <- ChIPQC(SS2_R8,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
SS2_R8<-SS2[3:4,]
resExperiment_R8 <- ChIPQC(SS2_R8,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment_R8
experiment=SS2_R8
annotation=customAnnotation
blacklist=blackgr
chromosomes=chromosomes
consensus = FALSE
bCount = FALSE
mapQCth = 15
profileWin = 400
fragmentLength = 125
shifts = 1:300
if (class(experiment) == "character" || class(experiment) ==
"data.frame") {
experiment = dba(sampleSheet = experiment, bCorPlot = FALSE,
peakCaller = "bed")
}
experiment
if (class(experiment) != "DBA") {
stop("experiment must be either a samplesheet filename or a DBA (DiffBind) object.")
}
experiment$config$mapQCth = mapQCth
experiment
meta = data.frame(t(experiment$class))
head(meta)
if (length(unique(meta$bamRead)) != nrow(meta)) {
stop("Unable to process. Each bam file must be associated with at most one peakset.")
}
if (!missing(samples)) {
for (i in 1:length(experiment$peaks)) {
if (nrow(experiment$peaks[[i]]) == 0) {
experiment = addMatchingSample(experiment, i,
meta, samples)
}
}
experiment = dba(experiment, bCorPlot = FALSE)
}
if (!missing(samples)) {
for (i in 1:length(experiment$peaks)) {
if (nrow(experiment$peaks[[i]]) == 0) {
experiment = addMatchingSample(experiment, i,
meta, samples)
}
}
experiment = dba(experiment, bCorPlot = FALSE)
}
?addMatchingSample
??addMatchingSample
if (missing(chromosomes)) {
chromosomes = 1
}
chromosomes
if (is.numeric(chromosomes) && missing(samples)) {
chrmap = experiment$chrmap
if (length(chrmap) == 0) {
warning("No chromosomes specified in peaks, using all.")
chromosomes = NULL
}
else {
if (max(chromosomes) > length(chrmap)) {
warning("Specified chromosome number exceeds chromosomes seen in peaks.")
chromosomes = chromosomes[chromosomes <= length(chrmap)]
}
chromosomes = chrmap[chromosomes]
message("Checking chromosomes:")
print(chromosomes)
}
}
if (!missing(annotation)) {
if (!is.null(annotation) && missing(samples)) {
if (class(annotation) != "list") {
message("Compiling annotation...")
annotation = getAnnotation(annotation, AllChr = chromosomes)
}
if (annotation$version == "hg19" && missing(blacklist)) {
blacklist = read.table(file.path(system.file("extdata",
package = "ChIPQC"), "blacklist_hg19.bed"),
header = TRUE)[, 1:4]
blacklist = makeGRangesFromDataFrame(blacklist,
ignore.strand = TRUE)
message("Using default blacklist for hg19...")
}
}
else if (class(annotation) == "character") {
annotation = list(version = annotation)
}
else {
annotation = list(version = "none")
}
}
annotation = list(version = "none")
annotation
annotation[[1]]
samplelist = NULL
controlist = NULL
i=1
newrec = NULL
newrec$peaks = experiment$peaks[[i]]
if (nrow(newrec$peaks) == 0) {
newrec$peaks = NULL
}
newrec
head(newrec)
dim(newrec)
class(newrec)
names(newrec)
newrec = NULL
newrec$peaks = experiment$peaks[[i]]
if (nrow(newrec$peaks) == 0) {
newrec$peaks = NULL
}
newrec$bam = as.character(meta$bamRead[i])
samplelist = listadd(samplelist, newrec)
??listadd
library(goseq)
cite(goseq)
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100))
base_graph_df
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100),
Dates=c("Mon","Tue","Wed","Thurs","Fri","Sat"))
base_graph_df
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100),
days=c("Mon","Tue","Wed","Thu","Fri","Sat"))
base_graph_df
plot(base_graph_df$sample_num,base_graph_df$treatment)
plot(base_graph_df$sample_num,base_graph_df$treatment)
?plot()
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
plot(base_graph_df$sample_num,base_graph_df$treatment,type="l")
plot(base_graph_df$sample_num,base_graph_df$treatment)
?plot
base_graph_df$control
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue", ylim=c(0,100))
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
?geom_point
library("ggplot2")
?geom_point
?biocLite
??biocLite
sessionInfo()
library("GenomicRanges")
chr <- Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 2))
chr
gr1 <- GRanges(seqnames = Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
ranges = IRanges(start=11:20, end = 50:59, names = head(letters,10)),
strand = Rle(c("-", "+", "-", "+", "-"), c(1,2, 2, 3, 2)),
score = 1:10, GC = runif(10,0,1))
gr1
mcols(gr1)
mm9genes <- read.table("mm9Genes.txt",sep="\t",header=T)
mm9genes <- read.table("./data/mm9Genes.txt",sep="\t",header=T)
setwd("/Volumes/bioinfomatics$/yfwang/CBW/Bioconductor_2019/course")
mm9genes <- read.table("./data/mm9Genes.txt",sep="\t",header=T)
head(mm9genes)
mm9genes.GR <- GRanges(seqnames=mm9genes$chr,
ranges=IRanges(start=mm9genes$start,end=mm9genes$end),
strand=mm9genes$strand,
ENSID=mm9genes$ens,
Symbol=mm9genes$Symbol)
head(mm9genes.GR)
?makeGRangesFromDataFrame
?makeGRangesFromDataFrame
class(mm9genes.GR)
mm9genes.GR <- makeGRangesFromDataFrame(mm9genes)
mm9genes.GR2 <- makeGRangesFromDataFrame(mm9genes)
head(mm9genes.GR2)
mm9genes.GR3 <- makeGRangesFromDataFrame(mm9genes,keep.extra.columns==T)
?makeGRangesFromDataFrame
mm9genes.GR3 <- makeGRangesFromDataFrame(mm9genes,
keep.extra.columns=T)
mm9genes.GR3
gr2 <- GRanges(seqnames = Rle(c("chr1", "chr3","chr2", "chr1", "chr3"), c(1, 2,1, 2, 4)),
ranges = IRanges(start=55:64, end = 94:103, names = letters[11:20]),
strand = Rle(c("+", "-", "+", "-"), c(1, 4, 3, 2)),
score = 1:10, GC = runif(10,0,1))
GRL <- GRangesList("Peak1" = gr1, "Peak2" = gr2)
subsetByOverlaps(gr1,gr2,ignore.strand=F)
gr1[gr1 %in% gr2]
gr1[gr1 %over% gr2]
library("Rsamtools")
BamFile <- system.file("extdata", "ex1.bam", package="Rsamtools")
which <- RangesList(seq1=IRanges(1000, 2000),seq2=IRanges(c(100, 1000), c(1000, 2000)))
what <- c("rname", "strand", "pos", "qwidth", "seq")
which
which <- IRangesList(seq1=IRanges(1000, 2000),seq2=IRanges(c(100, 1000), c(1000, 2000)))
what <- c("rname", "strand", "pos", "qwidth", "seq")
param <- ScanBamParam(which=which, what=what)
bamReads <-  scanBam(BamFile, param=param)
length(bamReads) # Each element of the list corresponds to a range speciﬁed by the which argument in ScanBamParam
names(bamReads[[1]]) # elements speciﬁed by the what and tag arguments to ScanBamParam
bamReads
names(bamReads)
# Constructor
ScanBamParam(flag = scanBamFlag(), what = character(0), which)
library("Rsamtools")
BamFile <- system.file("extdata", "ex1.bam", package="Rsamtools")
which <- IRangesList(seq1=IRanges(1000, 2000),seq2=IRanges(c(100, 1000), c(1000, 2000)))
what <- c("rname", "strand", "pos", "qwidth", "seq")
param <- ScanBamParam(which=which, what=what)
bamReads <-  scanBam(BamFile, param=param)
length(bamReads) # Each element of the list corresponds to a range speciﬁed by the which argument in ScanBamParam
names(bamReads[[1]]) # elements speciﬁed by the what and tag arguments to ScanBamParam
# Constructor
ScanBamParam(flag = scanBamFlag(), what = character(0), which)
scanBamFlag()
# Constructor helpers
scanBamFlag(isPaired = NA, isProperPair = NA, isUnmappedQuery = NA,
hasUnmappedMate = NA, isMinusStrand = NA, isMateMinusStrand = NA,
isFirstMateRead = NA, isSecondMateRead = NA, isNotPrimaryRead = NA,
isNotPassingQualityControls = NA, isDuplicate = NA)
?ScanBamParam
which <- GRangesList(seq1=IRanges(1000, 2000),seq2=IRanges(c(100, 1000), c(1000, 2000)))
# Constructor
ScanBamParam(flag = scanBamFlag(), what = character(0), which)
which <- IRangesList(seq1=IRanges(1000, 2000),seq2=IRanges(c(100, 1000), c(1000, 2000)))
what <- c("rname", "strand", "pos", "qwidth", "seq")
# Constructor
ScanBamParam(flag = scanBamFlag(), what = scanBamWhat(), which)
# Constructor
ScanBamParam( what = scanBamWhat(), which)
which <- IRangesList("6"=IRanges(100000L, 110000L))
which
param <- ScanBamParam(which=which, what=scanBamWhat())
param
which <- IRangesList(seq1=IRanges(1000, 2000),seq2=IRanges(c(100, 1000), c(1000, 2000)))
param <- ScanBamParam(which=which, what=scanBamWhat())
param
# Constructor
ScanBamParam(flag = scanBamFlag(), what = scanBamWhat(), which)
# Constructor
ScanBamParam(what = scanBamWhat(), which)
which
which <- IRangesList(seq1=IRanges(1000, 2000),seq2=IRanges(c(100, 1000), c(1000, 2000)))
ScanBamParam(which=which, what=scanBamWhat())
# Constructor
ScanBamParam(what = scanBamWhat(), which=which)
# Constructor
ScanBamParam(what = scanBamWhat(), which=which)
# Constructor
ScanBamParam(what = scanBamWhat(), which=which)
# Constructor
ScanBamParam(flag = scanBamFlag(), what = scanBamWhat(), which=which)
# Constructor helpers
scanBamFlag(isPaired = NA, isProperPair = NA, isUnmappedQuery = NA,
hasUnmappedMate = NA, isMinusStrand = NA, isMateMinusStrand = NA,
isFirstMateRead = NA, isSecondMateRead = NA, isNotPrimaryRead = NA,
isNotPassingQualityControls = NA, isDuplicate = NA)
# Constructor helpers
scanBamFlag(isPaired = NA, isProperPair = NA, isUnmappedQuery = NA,
hasUnmappedMate = NA, isMinusStrand = NA, isMateMinusStrand = NA,
isFirstMateRead = NA, isSecondMateRead = NA, isSecondaryAlignment = NA,
isNotPassingQualityControls = NA, isDuplicate = NA)
scanBamFlag(isUnmappedQuery=FALSE, isMinusStrand=TRUE)
p0 <- ScanBamParam()
p0
library(GenomicAlignments)
BamFile
SampleAlign <- readGAlignments(BamFile)
SampleAlign
region <- RangesList(seq1=IRanges(1000, 2000),seq2=IRanges(1000, 2000))
region <- IRangesList(seq1=IRanges(1000, 2000),seq2=IRanges(1000, 2000))
param1 <- ScanBamParam(what=c("rname", "pos", "cigar","qwidth"),which=region)
SampleAlign1 <- readGAlignments(BamFile,param=param1)
SampleAlign1
SampleAlign
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
help(SYMBOL)
keytypes(org.Hs.eg.db)
head(keys(org.Hs.eg.db, keytype="SYMBOL"))
select(org.Hs.eg.db, keys = "A1BG", keytype = "SYMBOL", columns = c("SYMBOL", "GENENAME", "CHR") )
columns(org.Hs.eg.db)
?select
select(org.Hs.eg.db, keys = "A1BG", keytype = "SYMBOL", columns = c("SYMBOL", "GENENAME") )
select(org.Hs.eg.db, keys = "A1BG", keytype = "SYMBOL", columns = c("SYMBOL", "GENENAME", "TXCHROM") )
select(org.Hs.eg.db, keys = "A1BG", keytype = "SYMBOL", columns = c("SYMBOL", "GENENAME", "ENSEMBL") )
load(system.file("extdata", "resultTable.Rda", package="AnnotationDbi"))
head(resultTable)
SYM <- select(org.Hs.eg.db, keys = rownames(resultTable), keytype = "ENTREZID", columns = "SYMBOL")
NewResult <- merge(resultTable,SYM,by.x=0,by.y=1)
head(NewResult)
head(SYM)
head(SYM)
library("TxDb.Mmusculus.UCSC.mm9.knownGene")
library("TxDb.Mmusculus.UCSC.mm9.knownGene")
txdb <- TxDb.Mmusculus.UCSC.mm9.knownGene
library(GenomicFeatures)
txdb <- makeTxDbFromUCSC(genome = "mm9", tablename = "knownGene")
txdb
keys <- c("100009600", "100009609", "100009614")
select(txdb,keys=keys,columns=c("GENEID","TXNAME"),keytype="GENEID")
columns(txdb)
TranscriptRanges <- transcripts(txdb)
TranscriptRanges[1:3]
ExonRanges <- exons(txdb)
ExonRanges[1:2]
library("TxDb.Mmusculus.UCSC.mm9.knownGene")
txdb <- TxDb.Mmusculus.UCSC.mm9.knownGene
library(GenomicFeatures)
txdb <- makeTxDbFromUCSC(genome = "mm9", tablename = "knownGene")
txdb <- TxDb.Mmusculus.UCSC.mm9.knownGene
saveDb(txdb,file="Mouse_ucsc_mm9_20190919.sqlite")
txdb <- loadDb("Mouse_ucsc_mm9_20190919.sqlite")
txdb
library("biomaRt")
marts <- listMarts(host="www.ensembl.org") # List available marts
library("biomaRt")
marts <- listMarts(host="www.ensembl.org") # List available marts
marts[1,]
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", host = "sep2015.archive.ensembl.org") # select ensembl
ens_datasets <- listDatasets(ensembl) # list datasets
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl) # select human dataset
ens_human_Attr <- listAttributes(ens_human) # list available annotation
ens_human_filters <- listFilters(ens_human) # list availabel filters
chrXGenes <- getBM(attributes = c("chromosome_name","start_position","end_position","ensembl_gene_id","strand","external_gene_name"), filter="chromosome_name",values="X", mart=ens_human)
head(chrXGenes)
sessino
sessionInfo()
