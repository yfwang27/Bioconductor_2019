library(genomation)
library(heatmap)
library(heatmaps)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("heatmaps", version = "3.8")
library(rtracklayer)
library(GenomicRanges)
library(BSgenome.Drerio.UCSC.danRer7)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Drerio.UCSC.danRer7", version = "3.8")
library(GenomicRanges)
library(BSgenome.Drerio.UCSC.danRer7)
heatmaps_file = function(fn) system.file("extdata", fn, package="heatmaps")
zf_30p_promoters = import(heatmaps_file("30pEpi_proms.bed"), genome=seqinfo(Drerio))
zf_30p_promoters
heatmaps_file
h3k4me3_30p_pos = readRDS(heatmaps_file("H3K4me3_30p_pos.rds"))
h3k4me3_30p_neg = readRDS(heatmaps_file("H3K4me3_30p_neg.rds"))
h3k4me3_30p_pos
h3k4me3_30p = h3k4me3_30p_pos + h3k4me3_30p_neg
h3k4me3_30p
class(h3k4me3_30p)
h3k4me3_30p_subtracted = h3k4me3_30p_pos - h3k4me3_30p_neg
h3k4me3_30p_subtracted_hm = CoverageHeatmap(
windows_30p,
h3k4me3_30p_subtracted,
coords=coords,
label="Phase")
?CoverageHeatmap
??CoverageHeatmap
library(heatmaps)
h3k4me3_30p_subtracted_hm = CoverageHeatmap(
windows_30p,
h3k4me3_30p_subtracted,
coords=coords,
label="Phase")
windows_30p = windows_30p[width(trim(windows_30p)) == 1000]
h3k4me3_30p_heatmap = CoverageHeatmap(
windows_30p,
h3k4me3_30p,
coords=coords,
label="H3K4me3 30p")
windows_30p
coords<-c(-500, 500)
coords<-c(-500, 500)
windows_30p = promoters(zf_30p_promoters, -coords[1], coords[2])
windows_30p
windows_30p = windows_30p[width(trim(windows_30p)) == 1000]
h3k4me3_30p_heatmap = CoverageHeatmap(
windows_30p,
h3k4me3_30p,
coords=coords,
label="H3K4me3 30p")
?CoverageHeatmap
windows_30p
h3k4me3_30p
h3k4me3_30p_subtracted_hm = CoverageHeatmap(
windows_30p,
h3k4me3_30p_subtracted,
coords=coords,
label="Phase")
plotHeatmapList(h3k4me3_30p_heatmap, cex.label=1, color="Greens")
h3k4me3_30p_heatmap
class(h3k4me3_30p_heatmap)
plotHeatmapMeta(h3k4me3_30p_heatmap)
raw_matrix = image(h3k4me3_30p_subtracted_hm)
h3k4me3_30p_subtracted_hm
raw_matrix
head(raw_matrix)
dim(raw_matrix)
clusters = kmeans(raw_matrix, 2)$cluster
mat = raw_matrix[order(clusters),]
clusters
h3k4me3_30p_subtracted_kmeans = Heatmap(
mat,
coords=coords,
label="kmeans",
scale=c(-150, 150))
coords
plotHeatmapList(h3k4me3_30p_subtracted_kmeans,
cex.label=1.5,
color=c("red", "white", "blue"),
partition=c(sum(clusters==1), sum(clusters==2)),
partition.legend=TRUE,
partition.lines=TRUE,
legend=TRUE,
legend.pos="r",
legend.width=0.3)
class(raw_matrix)
mat[c(1:5),c(1:5)]
coords
rich8equal = c("#000041", "#0000CB", "#0081FF", "#02DA81", "#80FE1A", "#FDEE02", "#FFAB00", "#FF3300")
pal(rich8equal)
pal <- function(col, border = "light gray", ...){
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "", ...)
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal(rich8equal)
rev(rich8equal)
pal(rich8equal)
pal(tt)
tt
tt<-rev(rich8equal)
tt
pal(tt)
pal(tt)
pal(tt)
pat(rich8equal)
pal(rich8equal)
rich8equal2<-rich8equal[c(2,4,6,8)]
pal(rich8equal2)
pal(rich8equal)
rich8equal2<-rich8equal[c(2,3,4,6,8,1)]
pal(rich8equal2)
rich8equal2
#K27_ChIP_methy<-ave_PGC_K27K9_WGBS_intergenic_list[[1]]
K27_ChIP_methy<-ave_PGC_K27K9_WGBS_genic_list[[1]]
?scale
y <- cbind(
rnorm( 1000, 20, 4 ),
rnorm( 1000, 20, 4 ),
rnorm( 1000, 20, 4 ),
rnorm( 1000, 20, 4 ) )
library(genefilter)
hist( rowttests( y, factor( c( "C", "C", "T", "T" ) ) )$p.value )
y <- cbind(
rnorm( 1000, 20, 4 ),
rnorm( 1000, 30, 4 ),
rnorm( 1000, 20, 4 ),
rnorm( 1000, 30, 4 ) )
y
hist( rowttests( y, factor( c( "C", "C", "T", "T" ) ) )$p.value )
inbgfile<-"/Volumes/bioinfomatics$/yfwang/Felix/neuro_Rad21Tev_RNAseq/script/Sample_2_etoh_72hours.bedGraph"
oribg<-read.delim(inbgfile)
dim(oribg)
head(oribg)
unique(oribg$chr1)
oribg<-oribg[-grep("random",oribg[,1]),]
dim(oribg)
head(oribg)
unique(oribg$chr1)
outbgfile<-"/Volumes/bioinfomatics$/yfwang/Felix/neuro_Rad21Tev_RNAseq/script/Sample_2_etoh_72hours.okbg"
write.table(oribg,file=outbgfile,quote=F,header=F,sep="\r",row.names = F)
?write.table
write.table(oribg,file=outbgfile,quote=F,sep="\t",row.names = F,col.names=F)
?order
oribg<-oribg[order(oribg[,1],order[,2]),]
oribg<-oribg[order(oribg[,1],oribg[,2]),]
write.table(oribg,file=outbgfile,quote=F,sep="\t",row.names = F,col.names=F)
oribg<-read.delim(inbgfile,header = F,stringsAsFactors = F)
oribg<-oribg[-grep("random",oribg[,1]),]
head(oribg)
class(oribg$V1)
class(oribg$V2)
oribg2<-oribg[order(oribg[,1],oribg[,2]),]
head(oribg2)
unique(oribg2$V1)
write.table(oribg2,file=outbgfile,quote=F,sep="\t",row.names = F,col.names=F)
?cbind
suppressPackageStartupMessages(library("basecallQC"))
suppressPackageStartupMessages(library("stringr"))
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("tidyr"))
read.csv("/Volumes/bioinfomatics$/yfwang/Vernia/Collaborator_Brain/script/SampleDes.csv")
sampledes<-read.csv("/Volumes/bioinfomatics$/yfwang/Vernia/Collaborator_Brain/script/SampleDes.csv")
head(sampledes)
table(sampledes$Tissue)
table(sampledes$Genotype)
ftable(sampledes$Tissue,sampledes$Genotype)
dirgene<-"/Volumes/bioinfomatics$/yfwang/Louise/TCGA_pancancer/rawdata_from_Louis/list_of_INT/"
kegg_glycolysis<-read.table(paste0(dirgene,"KEGG_Glycolysis_Gluconeogenesis.txt"),header = F)
kegg_glycolysis<-kegg_glycolysis$V1
kegg_glycolysis<-kegg_glycolysis[!duplicated(kegg_glycolysis)]
Rabinowitz_genes<-read.table(paste0(dirgene,"RateLimiting_GSEA.txt"),header = F)
Rabinowitz_genes<-Rabinowitz_genes$V1
Rabinowitz_genes<-Rabinowitz_genes[!duplicated(Rabinowitz_genes)]
log2(0+0.1)
log2(0+00.1)
install.packages(c("DT", "formattable", "ggplot2", "knitr", "prettydoc"))
install.packages(c("gplots", "plotly"))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library("MotifDb"))
library("ChIPQC")
?ChIPQC
data(example_QCexperiment)
QCannotation(exampleExp)
exampleExp
ChIPQC()
ChIPQC
# annotation
#Either a character string indicating the genome and version to use as a genomic annotation,
#or a previously defined annotation (obtained using QCannotation on a previously defined ChIPQCexperiment object.)
library(rtracklayer)
library(GenomicRanges)
library(GenomicFeatures)
library(ChIPQC)
ce10gtf<-"/Volumes/bioinfomatics$/yfwang/Jocelyn/UCSC_ce10/UCSC_ce10_genes.gtf"
ce10genes<-import(ce10gtf,format="gtf")
unique(ce10genes$type)
txdb <- makeTxDbFromGFF (ce10gtf)
genes_fromce10 <- genes(txdb)
Alltranscripts<- reduce(transcripts(txdb))
seqlengths(Alltranscripts)<-c(15072423,15279345,13783700,17493793,20924149,17718866)
Allcds <- reduce(unique(unlist(cdsBy(txdb,"tx"))))
#cdsFromce10<-cds(txdb)
#cdsFromce10_reduce<- reduce(cdsFromce10)
exons_fromce10<-exons(txdb)
exons_fromce10_reduce<-reduce(exons_fromce10)
#utr_5fromce10<-fiveUTRsByTranscript(txdb)
#utr_3fromce10<-threeUTRsByTranscript(txdb)
Allintrons <- reduce(unique(unlist(intronsByTranscript(txdb))))
posAllTranscripts <- Alltranscripts[strand(Alltranscripts) == "+"]
posAllTranscripts <- posAllTranscripts[!(start(posAllTranscripts)-20000 < 0)]
negAllTranscripts <- Alltranscripts[strand(Alltranscripts) == "-"]
chrLimits <- seqlengths(negAllTranscripts)[as.character(seqnames(negAllTranscripts))]
if(!any(is.na(chrLimits))){
negAllTranscripts <- negAllTranscripts[!(end(negAllTranscripts)+20000 > chrLimits)]
}
Alltranscripts <- c(posAllTranscripts,negAllTranscripts)
Promoters500<-reduce(flank(Alltranscripts,500))
Promoters2000to500<-reduce(flank(Promoters500,1500))
Promoters20000to2000<- reduce(flank(Promoters2000to500,18000))
customAnnotation <- list(
version="ce10",
LongPromoters20000to2000=Promoters20000to2000,
Promoters2000to500=Promoters2000to500,
Promoters500=Promoters500,
Alltranscripts=Alltranscripts,
Allcds=Allcds,
Allintrons=Allintrons
)
bamfiles<-dir("/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019/Aligned",
pattern="*DupMarked.bam",full.names = T)
names(bamfiles)<-gsub(".DupMarked.bam","",basename(bamfiles))
blacklist<-"/Volumes/bioinfomatics$/yfwang/Jocelyn/UCSC_ce10/ce10-blacklist.bed"
chromosomes=c("chrI","chrII","chrIII","chrIV","chrV","chrX")
blackgr<-import(blacklist,format="bed")
SampleSheet <- "/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019/script/Pipelinesamplesheet.txt"
organism <- "ce10"
ss <- read.delim(SampleSheet,sep="\t",header=F)
ss <- read.delim(SampleSheet,sep="\t",header=F)
ss
baseDir="/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019"
bamFiles <- dir(file.path(baseDir,"Aligned"),pattern="*.DupMarked\\.bam$",full.name=T)
bamBase <- gsub("DupMarked\\.bam","",basename(bamFiles))
bamFrame <- cbind(bamBase,bamFiles)
peaks <-  dir(file.path(baseDir,"Macs"),pattern="*_peaks.bed$",full.name=T)
peaksBase <- gsub("_WithInput.*","",basename(peaks))
peakFrame <- cbind(peaksBase,peaks)
ss <- ss[ss[,11] == "Report",]
ssFrame <- merge(ss[,c(2,4,6,7,8,9,10,11)]
,merge(bamFrame,peakFrame,by=1,all.x=T,all.y=F)
,by=1,all.x=F,all.y=F)
bamControl <- vector("character",length=nrow(ssFrame))
for(i in 1:nrow(ssFrame)){
if(any(ssFrame[,1] %in% ssFrame[i,2])){
bamControl[i] <- as.vector(ssFrame[ssFrame[,1] %in% ssFrame[i,2],9])
}else{
bamControl[i] <- NA
}
}
SS2 <- data.frame(
SampleID=as.vector(ssFrame[,1]),
Tissue=as.vector(ssFrame[,3]),
Factor=as.vector(ssFrame[,4]),
Condition=as.vector(ssFrame[,5]),
Treatment=as.vector(ssFrame[,6]),
Replicate=as.vector(ssFrame[,7]),
bamReads=as.vector(ssFrame[,9]),
bamControl=bamControl,
ControlID=as.vector(ssFrame[,2]),
Peaks=as.vector(ssFrame[,10]),
PeakCaller=c(rep("macs",nrow(ssFrame)))
#Peaks=c(rep(NA,7))
)
SS2
ChIPQC
?ChIPQC
SS2
chromosomes
blackgr
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
str(resExperiment)
?ChIPQC
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
ChIPQC
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blacklist,chromosomes=chromosomes)
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
head(SS2)
SS2_N2<-SS2[1:2,]
SS2_N2
resExperiment_N2 <- ChIPQC(SS2_N2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment_R8 <- ChIPQC(SS2_R8,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
SS2_R8<-SS2[3:4,]
resExperiment_R8 <- ChIPQC(SS2_R8,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment_R8
experiment=SS2_R8
annotation=customAnnotation
blacklist=blackgr
chromosomes=chromosomes
consensus = FALSE
bCount = FALSE
mapQCth = 15
profileWin = 400
fragmentLength = 125
shifts = 1:300
if (class(experiment) == "character" || class(experiment) ==
"data.frame") {
experiment = dba(sampleSheet = experiment, bCorPlot = FALSE,
peakCaller = "bed")
}
experiment
if (class(experiment) != "DBA") {
stop("experiment must be either a samplesheet filename or a DBA (DiffBind) object.")
}
experiment$config$mapQCth = mapQCth
experiment
meta = data.frame(t(experiment$class))
head(meta)
if (length(unique(meta$bamRead)) != nrow(meta)) {
stop("Unable to process. Each bam file must be associated with at most one peakset.")
}
if (!missing(samples)) {
for (i in 1:length(experiment$peaks)) {
if (nrow(experiment$peaks[[i]]) == 0) {
experiment = addMatchingSample(experiment, i,
meta, samples)
}
}
experiment = dba(experiment, bCorPlot = FALSE)
}
if (!missing(samples)) {
for (i in 1:length(experiment$peaks)) {
if (nrow(experiment$peaks[[i]]) == 0) {
experiment = addMatchingSample(experiment, i,
meta, samples)
}
}
experiment = dba(experiment, bCorPlot = FALSE)
}
?addMatchingSample
??addMatchingSample
if (missing(chromosomes)) {
chromosomes = 1
}
chromosomes
if (is.numeric(chromosomes) && missing(samples)) {
chrmap = experiment$chrmap
if (length(chrmap) == 0) {
warning("No chromosomes specified in peaks, using all.")
chromosomes = NULL
}
else {
if (max(chromosomes) > length(chrmap)) {
warning("Specified chromosome number exceeds chromosomes seen in peaks.")
chromosomes = chromosomes[chromosomes <= length(chrmap)]
}
chromosomes = chrmap[chromosomes]
message("Checking chromosomes:")
print(chromosomes)
}
}
if (!missing(annotation)) {
if (!is.null(annotation) && missing(samples)) {
if (class(annotation) != "list") {
message("Compiling annotation...")
annotation = getAnnotation(annotation, AllChr = chromosomes)
}
if (annotation$version == "hg19" && missing(blacklist)) {
blacklist = read.table(file.path(system.file("extdata",
package = "ChIPQC"), "blacklist_hg19.bed"),
header = TRUE)[, 1:4]
blacklist = makeGRangesFromDataFrame(blacklist,
ignore.strand = TRUE)
message("Using default blacklist for hg19...")
}
}
else if (class(annotation) == "character") {
annotation = list(version = annotation)
}
else {
annotation = list(version = "none")
}
}
annotation = list(version = "none")
annotation
annotation[[1]]
samplelist = NULL
controlist = NULL
i=1
newrec = NULL
newrec$peaks = experiment$peaks[[i]]
if (nrow(newrec$peaks) == 0) {
newrec$peaks = NULL
}
newrec
head(newrec)
dim(newrec)
class(newrec)
names(newrec)
newrec = NULL
newrec$peaks = experiment$peaks[[i]]
if (nrow(newrec$peaks) == 0) {
newrec$peaks = NULL
}
newrec$bam = as.character(meta$bamRead[i])
samplelist = listadd(samplelist, newrec)
??listadd
library(goseq)
cite(goseq)
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100))
base_graph_df
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100),
Dates=c("Mon","Tue","Wed","Thurs","Fri","Sat"))
base_graph_df
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100),
days=c("Mon","Tue","Wed","Thu","Fri","Sat"))
base_graph_df
plot(base_graph_df$sample_num,base_graph_df$treatment)
plot(base_graph_df$sample_num,base_graph_df$treatment)
?plot()
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
plot(base_graph_df$sample_num,base_graph_df$treatment,type="l")
plot(base_graph_df$sample_num,base_graph_df$treatment)
?plot
base_graph_df$control
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue", ylim=c(0,100))
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
?geom_point
library("ggplot2")
?geom_point
?biocLite
??biocLite
sessionInfo()
setwd("/Volumes/bioinfomatics$/yfwang/CBW/Bioconductor_2019/course")
library(GenomicRanges)
hg19Gene <- read.table("./data/hg19Genes.txt",sep="\t",header=T)
setwd("/Volumes/bioinfomatics$/yfwang/CBW/Bioconductor_2019/course")
hg19Gene <- read.table("./data/hg19Genes.txt",sep="\t",header=T)
head(hg19Gene)
hg19Gene$TSS <- ifelse(hg19Gene$strand==1,hg19Gene$start,hg19Gene$end)
head(hg19Gene)
class(hg19Gene$strand)
levels(hg19Gene$strand)
as.numeric(levels(hg19Gene$strand))
levels(hg19Gene$strand)==1
levels(hg19Gene$strand)==2
head(hg19Gene)
head(hg19Gene[hg19Gene$strand==1,])
head(hg19Gene[hg19Gene$strand=="+",])
head(hg19Gene[hg19Gene$strand=="-",])
hg19TSS <- GRanges(seqnames=hg19Gene$chr,
ranges=IRanges(start=hg19Gene$TSS,end=hg19Gene$TSS),
strand=ifelse(hg19Gene$strand==1,"+","-"),
EnsemblID=hg19Gene$ensID,
Symbol=hg19Gene$GeneSym)
hg19TSS
hg19Gene <- read.table("./data/hg19Genes.txt",sep="\t",header=T)
hg19Gene$TSS <- ifelse(hg19Gene$strand=="+",hg19Gene$start,hg19Gene$end)
head(hg19Gene)
hg19Gene <- read.table("./data/hg19Genes.txt",sep="\t",header=T)
hg19Gene$TSS <- ifelse(hg19Gene$strand=="+",hg19Gene$start,hg19Gene$end)
head(hg19Gene)
hg19TSS <- GRanges(seqnames=hg19Gene$chr,
ranges=IRanges(start=hg19Gene$TSS,end=hg19Gene$TSS),
strand=hg19Gene$strand,
EnsemblID=hg19Gene$ensID,
Symbol=hg19Gene$GeneSym)
hg19TSS
head(hg19Gene)
# First create GRanges object with gene coordinates
hg19Gene.GR <- GRanges(seqnames=hg19Gene$chr,
ranges=IRanges(start=hg19Gene$start,end=hg19Gene$end),
strand=hg19Gene$strand,
EnsemblID=hg19Gene$ensID,
Symbol=hg19Gene$GeneSym)
hg19Gene.GR
# Identifying promoters
hg19Promoters <- promoters(hg19Gene.GR,upstream=2000,downstream=2000)
hg19Promoters
head(hg19Gene)
library("rtracklayer")
ELF1 <- read.table("./data/ELF1_K562.bed",sep="\t",header=F)
ELF1GR <- GRanges(seqnames=ELF1$V1, IRanges(start=ELF1$V2+1,end=ELF1$V3))
ELF1GR
ELF1GR_A <- import.bed("./data/ELF1_K562.bed")
head(ELF1GR_A)
# ELF1 binding sites overlap with promoters using `findOverlaps`
hg19Promoters <- promoters(hg19Gene.GR,upstream=1000,downstream=1000)
ELF1GR <- reduce(ELF1GR) # merging overlapping peaks
ELF1overlap <- findOverlaps(ELF1GR,hg19Promoters,ignore.strand=T)
ELF1overlap.m <- as.matrix(ELF1overlap)
ELF1_promoters <- ELF1GR[ELF1overlap.m[,"queryHits"],]
ELF1_promoters
# ELF1 binding sites overlap with promoters using `subsetByOverlaps`
ELF1_promoters1 <- subsetByOverlaps(ELF1GR,hg19Promoters)
ELF1_promoters1
